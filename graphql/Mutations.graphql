#Request OTP
mutation RequestOtp($otpRequestData: OtpRequestDto!) {
  requestOtp(otpRequestData: $otpRequestData) {
    otpGeneratedSuccessfully
    otp
  }
}

#Login
mutation Login($loginData: ValidateDto!) {
  login(loginData: $loginData) {
    user {
      id
      email
      name 
      userType
    } 
    accessToken
  }
}

#logout
mutation Mutation {
  logout
}

# Register User
mutation Register($registerData: RegisterDto!) {
  register(registerData: $registerData) {
    user {
      id
      name
      username
      mobileNo
      email
      status
      avatar
      parentId
      organizationId
      userType
      createdAt
      updatedAt
      deletedAt
      roles {
        id
        name
        description
        roleType
        status
        permissionCount
      }
      designation
      parent {
        parent {
          id
        }
      }
    }
    accessToken
  }
}

#sendResetPasswordOtp
mutation SendRegistrationOtp($email: String!) {
  sendRegistrationOtp(email: $email) {
    otpGeneratedSuccessfully
    otp
    message
  }
}

# Create User
mutation CreateUser($data: CreateUserDto!) {
  createUser(data: $data) {
    id
    name
    username
    mobileNo
    email
    status
    avatar
    parentId
    organizationId
    userType
  }
}

#updateUser
mutation UpdateUser($data: UpdateUserDto!) {
  updateUser(data: $data) {
    id
    name
    username
    mobileNo
    email
    status
    avatar
    parentId
    organizationId
    userType
  }
}

#Hard deleteUser
mutation HardDeleteUser($ids: [Int!]!) {
  hardDeleteUser(ids: $ids)
}

#soft deleteUser
mutation DeleteUser($ids: [Int!]!) {
  deleteUser(ids: $ids)
}

# change status user
mutation ChangeUserStatus($data: UserStatusDto!) {
  changeUserStatus(data: $data) {
    ... on User {
      id
      status
    }
    ... on UserArray {
      data {
        id
        status
      }
    }
  }
}

#restore user
mutation RestoreUser($ids: [Int!]!) {
  restoreUser(ids: $ids)
}

#create role
mutation CreateRole($data: CreateRoleDto!) {
  createRole(data: $data) {
    id
    name
    description
  }
}

#update role
mutation UpdateRole($data: UpdateRoleDto!) {
  updateRole(data: $data) {
    description
    id
    name
  }
}

#delete role
mutation DeleteRole($ids: [Int!]!) {
  deleteRole(ids: $ids)
}

#hard delete role
mutation HardDeleteRole($ids: [Int!]!) {
  hardDeleteRole(ids: $ids)
}

#restore role
mutation RestoreRole($ids: [Int!]!) {
  restoreRole(ids: $ids)
}

#status change role
mutation ChangeRoleStatus($data: RoleStatusDto!) {
  changeRoleStatus(data: $data) {
    ... on Role {
      id
      status
    }
    ... on RoleArray {
      data {
        id
        status
      }
    }
  }
} 

#create permission
mutation CreatePermission($data: CreatePermissionDto!) {
  createPermission(data: $data) {
    id
    appName
    groupName
    module
    action
    slug
    description
  }
}

#update permission
mutation UpdatePermission($data: UpdatePermissionDto!) {
  updatePermission(data: $data) {
    id
    appName
    groupName
    module
    action
    slug
    description
  }
}

#delete permission
mutation DeletePermission($deletePermissionId: Float!) {
  deletePermission(id: $deletePermissionId)
}

#create organization
mutation CreateOrganization($createOrganizationInput: CreateOrganizationDto!, $registerData: RegisterDto!) {
  createOrganization(createOrganizationInput: $createOrganizationInput, registerData: $registerData) {
    id
    name
    description
    status
  }
}
#update organization
mutation UpdateOrganization($updateOrganizationInput: UpdateOrganizationDto!) {
  updateOrganization(updateOrganizationInput: $updateOrganizationInput) {
    id
    name
    description
    status
  }
}

#delete organization
mutation DeleteOrganization($ids: [Int!]!) {
  deleteOrganization(ids: $ids)
}

#all organization delete
mutation HardDeleteOrganization($ids: [Int!]!) {
  hardDeleteOrganization(ids: $ids)
}

#restore organization
mutation RestoreOrganization($ids: [Int!]!) {
  restoreOrganization(ids: $ids)
}

# list trah organization
query ListTrashedOrganizations($listInputDto: ListInputDTO!) {
  listTrashedOrganizations(ListInputDTO: $listInputDto) {
    meta {
      currentPage
      limit
      totalItems
      totalPages
    }
    data {
      id
      name
      status
    }
  }
}

#status change organization
mutation EnableOrganizationStatus($data: OrganizationStatusDto!) {
  enableOrganizationStatus(data: $data) {
    ... on Organization {
      id
      name
      description
      status
    }
    ... on OrganizationArray {
      data {
        id
        name
        description
        status
      }
    }
  }
}

#create project
mutation CreateProject($createProjectInput: CreateProjectDto!) {
  createProject(createProjectInput: $createProjectInput) {
    id
    name
    description
    organizationId
  }
}

#update project
mutation UpdateProject($updateProjectInput: UpdateProjectDto!) {
  updateProject(updateProjectInput: $updateProjectInput) {
    id
    name
    description
    status
    organizationId
  }
}

#delete project
mutation DeleteProject($ids: [Int!]!) {
  deleteProject(ids: $ids) 
}

#ennable project status
mutation EnableProjectStatus($data: ProjectStatusDto!) {
  enableProjectStatus(data: $data) {
    ... on Project {
      id
      status
    }
    ... on ProjectArray {
      data {
        id
        status
      }
    }
  }
}

#update profile user
mutation UpdateProfile($data: UpdateUserDto!) {
  updateProfile(data: $data) {
    id
    name
    username
    mobileNo
    email
    status
    avatar
    parentId
  }
}

#create MODULE
mutation CreateModule($createModuleInput: CreateModuleDto!) {
  createModule(createModuleInput: $createModuleInput) {
    id
    name
    description
    status
  }
}

#update MODULE
mutation UpdateModule($updateModuleInput: UpdateModuleDto!) {
  updateModule(updateModuleInput: $updateModuleInput) {
    id
    name
    description
    status
  }
}

#delete MODULE
mutation DeleteModule($ids: [Int!]!) {
  deleteModule(ids: $ids)
}

#hard delete MODULE
mutation HardDeleteModule($ids: [Int!]!) {
  hardDeleteModule(ids: $ids)
}

#restore MODULE
mutation RestoreModule($ids: [Int!]!) {
  restoreModule(ids: $ids)
}

#status change MODULE
mutation ChangeModuleStatus($updateModuleStatusInput: ModuleStatusDto!) {
  changeModuleStatus(updateModuleStatusInput: $updateModuleStatusInput) {
    ... on ApplicationModule {
      id
      name
      description
      status
    }
    ... on ApplicationModuleArray {
      data {
        id
        name
        description
        status
      }
    }
  }
}

# trash MODULE pagination
query TrashedModules($listInputDto: ListInputDTO!) {
  trashedModules(ListInputDTO: $listInputDto) {
    meta {
      currentPage
      limit
      totalItems
      totalPages
    }
    data {
      id
      name
      status
      description
    }
  }
}

#create Coupon
mutation CreateCoupon($createCouponInput: CreateCouponDto!) {
  createCoupon(createCouponInput: $createCouponInput) {
    couponCode
    description
    discountValue
    endDate
    id
    minOrderAmount
    startDate
    status
    usageLimit
  }
}

#update Coupon
mutation UpdateCoupon($updateCouponInput: UpdateCouponDto!) {
  updateCoupon(updateCouponInput: $updateCouponInput) {
    id
    couponCode
    description
    minOrderAmount
    usageLimit
    status
    startDate
    endDate
  }
}

#delete Coupon
mutation DeleteCoupon($ids: [Int!]!) {
  deleteCoupon(ids: $ids)
}

#delete hard Coupon
mutation HardDeleteCoupon($ids: [Int!]!) {
  hardDeleteCoupon(ids: $ids)
}

#restore Coupon
mutation RestoreCoupon($ids: [Int!]!) {
  restoreCoupon(ids: $ids)
}

#status change Coupon
mutation ChangeCouponStatus($updateCouponStatusInput: CouponStatusDto!) {
  changeCouponStatus(updateCouponStatusInput: $updateCouponStatusInput) {
    ... on Coupon {
      id
      status
    }
    ... on CouponArray {
      data {
        id
        status
      }
    }
  }
}

#create oofers
mutation CreateOffer($createOfferInput: CreateOfferDto!) {
  createOffer(createOfferInput: $createOfferInput) {
    id
    title
    description
    offerType
    discountValue
    usageLimit
    status
    startDate
    endDate
  }
}

#update oofers
mutation UpdateOffer($updateOfferInput: UpdateOfferDto!) {
  updateOffer(updateOfferInput: $updateOfferInput) {
    id
    title
    description
    offerType
    discountValue
    usageLimit
    status
    startDate
    endDate
  }
}

#delete soft offers
mutation DeleteOffer($ids: [Int!]!) {
  deleteOffer(ids: $ids)
}

#delete hard offers
mutation HardDeleteOffer($ids: [Int!]!) {
  hardDeleteOffer(ids: $ids)
}

#status change oofers
mutation ChangeOfferStatus($updateOfferStatusInput: OfferStatusDto!) {
  changeOfferStatus(updateOfferStatusInput: $updateOfferStatusInput) {
    ... on Offer {
      id
      status
    }
    ... on OfferArray {
      data {
        id
        status
      }
    }
  }
}

# restore offers
mutation RestoreOffer($ids: [Int!]!) {
  restoreOffer(ids: $ids)
}
#create PACKAGE
mutation CreatePackage($createPackageInput: CreatePackageDto!) {
  createPackage(createPackageInput: $createPackageInput) {
    id
    name
    description
    price
    discountedPrice
    status
    offerType
    offerDescription
    offerExpiryDate
    modules {
      id
      name
    }
  }
}

#update PACKAGE
mutation UpdatePackage($updatePackageInput: UpdatePackageDto!) {
  updatePackage(updatePackageInput: $updatePackageInput) {
    id
    name
    description
    price
    discountedPrice
    status
  }
}

#delete PACKAGE
mutation DeletePackage($ids: [Int!]!) {
  deletePackage(ids: $ids)
}

#restore PACKAGE
mutation RestorePackage($ids: [Int!]!) {
  restorePackage(ids: $ids)
}

#hard delete PACKAGE
mutation HardDeletePackage($ids: [Int!]!) {
  hardDeletePackage(ids: $ids)
}

#create Plan
mutation CreatePlan($createPlanInput: CreatePlanDto!) {
  createPlan(createPlanInput: $createPlanInput) {
    id
    name
    description
    price
    duration
    discountedPrice
    status
    package {
      id
      name
      description
      price
      discountedPrice
      status
      offerType
      offerDescription
      offerExpiryDate
      modules {
        id
        name
      }
    }
    couponCode
  }
}

#update Plan
mutation UpdatePlan($updatePlanInput: UpdatePlanDto!) {
  updatePlan(updatePlanInput: $updatePlanInput) {
    id
    name
    description
    price
    duration
    discountedPrice
    status
    couponCode
  }
}

#delete Plan
mutation DeletePlan($ids: [Int!]!) {
  deletePlan(ids: $ids)
}

# hard delete Plan
mutation HardDeletePlan($ids: [Int!]!) {
  hardDeletePlan(ids: $ids)
}

#restore Plan
mutation RestorePlan($ids: [Int!]!) {
  restorePlan(ids: $ids)
}

#status change Plan
mutation ChangePlanStatus($updatePlanStatusInput: PlanStatusDto!) {
  changePlanStatus(updatePlanStatusInput: $updatePlanStatusInput) {
    ... on Plan {
      id
      status
    }
    ... on PlanArray {
      data {
        id
        status
      }
    }
  }
}

#ApplyCouponToPlan
mutation ApplyCouponToPlan($planId: Int!, $couponCode: String!) {
  applyCouponToPlan(planId: $planId, couponCode: $couponCode) {
    id
    name
    couponCode
    discountedPrice
  }
}

#create Subscription
mutation CreateSubscription($createSubscriptionInput: CreateSubscriptionDto!) {
  createSubscription(createSubscriptionInput: $createSubscriptionInput) {
    couponCode
    duration
    id
    name
    plans {
      id
    }
    price
    status
  }
}

#update Subscription
mutation UpdateSubscription($updateSubscriptionInput: UpdateSubscriptionDto!) {
  updateSubscription(updateSubscriptionInput: $updateSubscriptionInput) {
    id
    name
    price
    duration
    status
  }
}

#delete Subscription
mutation DeleteSubscription($ids: [Int!]!) {
  deleteSubscription(ids: $ids)
}

#status change Subscription
mutation ChangeSubscriptionStatus(
  $updateSubscriptionStatusInput: SubscriptionStatusDto!
) {
  changeSubscriptionStatus(
    updateSubscriptionStatusInput: $updateSubscriptionStatusInput
  ) {
    ... on Subscriptions {
      id
      status
    }
    ... on SubscriptionsArray {
      data {
        id
        status
      }
    }
  }
}

# creat muitiple payment
mutation CreateMultipleOrder($input: CreateMultipleOrderInput!) {
  createMultipleOrder(input: $input)
}

# verify payment
mutation VerifyPayment($input: VerifyPaymentInput!) {
  verifyPayment(input: $input) {
    id
    name
    price
    duration
    status
    plans {
      id
    }
    coupon {
      id
    }
    couponCode
    paymentId
  }
}

mutation DeleteMeting($ids: [Int!]!) {
  deleteMeting(ids: $ids)
}

mutation CreateMeetingType($data: CreateMeetingTypeDto!) {
  createMeetingType(data: $data) {
    id
    name
  }
}

mutation UpdateMeetingType($updateMeetingTypeInput: UpdateMeetingTypeDto!) {
  updateMeetingType(updateMeetingTypeInput: $updateMeetingTypeInput) {
    id
    name
  }
}

mutation DeleteMetingVenue($ids: [Int!]!) {
  deleteMetingVenue(ids: $ids)
}

mutation CreateMeetingVenue($data: CreateMeetingVenueDto!) {
  createMeetingVenue(data: $data) {
    id
    name
    address
    contactPerson
    contactNumber
    description
    latitude
    longitude
    createdByUserId
  }
}
mutation UpdateMeetingVenue($updateMeetingVenueInput: UpdateMeetingVenueDto!) {
  updateMeetingVenue(updateMeetingVenueInput: $updateMeetingVenueInput) {
    id
    name
    address
    contactPerson
    contactNumber
    description
  }
}

mutation CreateMeeting($data: CreateMeetingDto!) {
  createMeeting(data: $data) {
    id
    meetingReference
    projectId
    createdByUserId
    meetingVenueId
    meetingTypeId
    parentMeetingId
    title
    startTime
    endTime
    status
    meetingDate
    meetingAgenda
    meetingUrl
    attendees
    uploadDoc
  }
}
mutation UpdateMeeting($updateMeetingInput: UpdateMeetingDto!) {
  updateMeeting(updateMeetingInput: $updateMeetingInput) {
    id
    meetingReference
    projectId
    createdByUserId
    meetingVenueId
    meetingTypeId
    parentMeetingId
    title
    startTime
    endTime
    status
    meetingDate
    meetingAgenda
    meetingUrl
    attendees
    uploadDoc
  }
}

mutation DeleteNotes($ids: [Int!]!) {
  deleteNotes(ids: $ids)
}

mutation CreateNotes($notesData: [CreateNotesDto!]!) {
  createNotes(notesData: $notesData) {
    id
    meetingId
    decision
    notes
    uploadDoc
  }
}

mutation DeleteMetingTask($ids: [Int!]!) {
  deleteMetingTask(ids: $ids)
}
mutation CreateMeetingTask($inputs: [CreateMeetingTaskDto!]!) {
  createMeetingTask(inputs: $inputs) {
    id
    ownerId
    createdByUserId
    assigneeId
    meetingId
    notesId
    projectId
    parentTaskId
    milestoneId
    ownerName
    assigneeName
    task
    projectName
    comment
    remarks
    openedDate
    dueDate
    completedDate
    priority
    status
    completePercent
    totalTaskComplete
    weightType
    totalTaskCompleteMilestone
  }
}

mutation CreateFollowUp($followUpData: CreateFollowUpDto!) {
  createFollowUp(followUpData: $followUpData) {
    id
    userId
    subject
    body
    createdById
  }
}

mutation CreateNotePad($notesData: CreateNotePadDto!) {
  createNotePad(notesData: $notesData) {
    id
    notesField
    status
  }
}

mutation DeleteNotePad($ids: [Int!]!) {
  deleteNotePad(ids: $ids)
}

mutation UpdateNotePad($updateNotesInput: UpdateNotePadDto!) {
  updateNotePad(updateNotesInput: $updateNotesInput) {
    id
    notesField
    status
  }
}

 mutation CreateVehicle($createVehicleInput: CreateVehicleDto!) {
  createVehicle(createVehicleInput: $createVehicleInput) {
    id 
  }
}

mutation UpdateVehicle($updateVehicleInput: UpdateVehicleDto!) {
  updateVehicle(updateVehicleInput: $updateVehicleInput) {
    id
  }
}

mutation DeleteVehicle($deleteVehicleId: Int!) {
  deleteVehicle(id: $deleteVehicleId)
}

mutation ChangePackageStatus($updatePackageStatusInput: PackageStatusDto!) {
  changePackageStatus(updatePackageStatusInput: $updatePackageStatusInput) {
    ... on Package {
      id
      name
      description
      price
      discountedPrice
      status
      offerType
      offerDescription
      offerExpiryDate
    }
    ... on PackageArray {
      data {
        id
        name
        description
        price
        discountedPrice
        status
        offerType
        offerDescription
        offerExpiryDate
      }
    }
  }
}

mutation EnableMeetingStatus($updateMeetingStatusInput: MeetingStatusDto!) {
  enableMeetingStatus(updateMeetingStatusInput: $updateMeetingStatusInput) {
    ... on Meeting {
      id
      status
    }
  }
}

mutation EnableVehicleStatus($data: VehicleStatusDto!) {
  enableVehicleStatus(data: $data) {
    id
    make
    model
    year
    color
    chassisNumber
    numberPlate
    maintenanceHistory
    avatar
    insurance
    insuranceValidTill
    status
    latitude
    longitude
    createdById 
    organizationId 
    createdAt
    updatedAt
    deletedAt
  }
}

mutation UpdateMeetingTask($updateMeetingTaskInput: UpdateMeetingTaskDto!) {
  updateMeetingTask(updateMeetingTaskInput: $updateMeetingTaskInput) {
    id
    ownerId
    createdByUserId
    assigneeId
    meetingId
    notesId
    projectId
    parentTaskId
    ownerName
    assigneeName
    task
    projectName
    comment
    openedDate
    dueDate
    completedDate
    priority
    status
    completePercent
    totalTaskComplete
    weightType
  }
}

mutation UpdateNotes($updateNotesInput: UpdateNotesDto!) {
  updateNotes(updateNotesInput: $updateNotesInput) {
    id
    createdByUserId
    meetingId
    decision
    notes
    uploadDoc
  }
}

mutation RestoreMeeting($ids: [Int!]!) {
  restoreMeeting(ids: $ids)
}

mutation HardDeleteMeeting($ids: [Int!]!) {
  hardDeleteMeeting(ids: $ids)
}

mutation CreateMilestone($input: MilestoneDto!) {
  createMilestone(input: $input) {
    id
    projectId
    name
    startDate
    endDate
    projectName
    totalTaskCompleteMilestone
    status
  }
}
mutation DeleteMilestone($ids: [Int!]!) {
  deleteMilestone(ids: $ids)
}
mutation DeleteFollowUp($ids: [Int!]!) {
  deleteFollowUp(ids: $ids)
}

mutation HardDeleteFollowUp($ids: [Int!]!) {
  hardDeleteFollowUp(ids: $ids)
}
mutation RestoreFollowUp($ids: [Int!]!) {
  restoreFollowUp(ids: $ids)
}
mutation UpdateFollowUp($updateFollowUpInput: UpdateFollowUpDto!) {
  updateFollowUp(updateFollowUpInput: $updateFollowUpInput) {
    id
    userId
    followUpId
    subject
    body
    createdById 
  }
}
mutation UpdateMilestone($updateMilestoneInput: UpdateMilestoneDto!) {
  updateMilestone(updateMilestoneInput: $updateMilestoneInput) {
    id
    projectId
    name
    startDate
    endDate
    projectName
    totalTaskCompleteMilestone
    status
  }
}
mutation RestoreMilestone($ids: [Int!]!) {
  restoreMilestone(ids: $ids)
}
mutation HardDeleteMilestone($ids: [Int!]!) {
  hardDeleteMilestone(ids: $ids)
}
mutation RestoreMeetingTask($ids: [Int!]!) {
  restoreMeetingTask(ids: $ids)
}
mutation HardDeleteMeetingTask($ids: [Int!]!) {
  hardDeleteMeetingTask(ids: $ids)
}
mutation RestoreMeetingVenue($ids: [Int!]!) {
  restoreMeetingVenue(ids: $ids)
}
mutation HardDeleteMeetingVenue($ids: [Int!]!) {
  hardDeleteMeetingVenue(ids: $ids)
}